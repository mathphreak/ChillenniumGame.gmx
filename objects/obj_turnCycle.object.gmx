<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
playerTurn = 1;
turns_elapsed = 0;
//Random break chance
break_chance = 0;
random_room = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>players = net_getPlayers();
var choice = "Fix"
//if its player turn
//determine whether current player is Sab
// maybe also check if it's already broken/fixed
if(players[playerTurn, 5]){
    choice = "Break"
}
else
    choice = "Fix"

//player picks a room
if playerTurn + 1 == 1{
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(getPlayerWithNumber(playerTurn).currentRoom),
        getRoomNeighbors(getPlayerWithNumber(playerTurn).currentRoom)
    )
}

if playerTurn + 1 == 2{
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(getPlayerWithNumber(playerTurn).currentRoom),
        getRoomNeighbors(getPlayerWithNumber(playerTurn).currentRoom)
    )
}


if playerTurn + 1 == 3{
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(getPlayerWithNumber(playerTurn).currentRoom),
        getRoomNeighbors(getPlayerWithNumber(playerTurn).currentRoom)
    )
}

if playerTurn + 1 == 4{
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(getPlayerWithNumber(playerTurn).currentRoom),
        getRoomNeighbors(getPlayerWithNumber(playerTurn).currentRoom)
    )
}


    
//room status changes to player
//attempt to take action (if fixed or not fixed)
//if succeed, room changes
//update total broken room state
//end turn, repeat

//Player finished their turn
if(players[playerTurn, 2]){
    playerTurn = (playerTurn + 1) mod 4 
}

//Everybody's gone once
if(net_allPlayersReady()){
    turns_elapsed += 1;
}


//redraw ship health
//redraw broken rooms num
//make new random break room chance
    
if(playerTurn == 0)
{
    break_chance = round(random(10))
    //random room broken
    if(break_chance == 1){
        random_room = round(random(6))
        rooms[random_room, 0] = "broken"
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
