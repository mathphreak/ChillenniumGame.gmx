<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
turns_elapsed = 0;
//Random break chance
mess_chance = 0;
random_room = 0;
choice_offered[0] = false;
choice_offered[1] = false;
choice_offered[2] = false;
choice_offered[3] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//room_goto(rm_lost_game)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>players = net_getPlayers();

var rooms = obj_shipData.rooms
    
//player picks a room

// don't offer a choice unless the player is still ready from last time
for (var i = 0; i &lt; 4; i++) {
    if !choice_offered[i] {
        var choice = getActionLabel(i);
        var currentPlayerType = getPlayerWithNumber(i);
        var currentPlayer = instance_find(currentPlayerType, 0);
        var currentRoom = currentPlayer.currentRoom;
        net_offerChoice(
            players[i, 0],
            choice,
            'You are in ' + obj_shipData.rooms[currentRoom-1,1] + " and it is currently " + obj_shipData.rooms[currentRoom-1,0],
            getRoomNeighbors(currentRoom)
        )
        choice_offered[i] = true;
    }
}
    
//room status changes to player
//attempt to take action (if clean or not clean)
//if succeed, room changes
//update total messy room state
//end turn, repeat

//Everybody's gone once
if(net_allPlayersReady()){
    NetworkInfoBox.trust_ready = false;

    choice_offered[0] = false;
    choice_offered[1] = false;
    choice_offered[2] = false;
    choice_offered[3] = false;
    for (var i=0; i&lt; array_height_2d(players); i+=1){
        var currentPlayerType = getPlayerWithNumber(i);
        var currentPlayer = instance_find(currentPlayerType, 0);
        var currentRoom = currentPlayer.currentRoom;
        if(players[i, 3] == "Clean up"){
            obj_shipData.rooms[currentRoom-1,0] = "clean"
        }
        else if(players[i,3] == "Leave a mess"){
            obj_shipData.rooms[currentRoom-1,0] = "messy"
        }
        else if(players[i,3] == obj_objective.coAction) {
            obj_objective.coComplete = true;
        }
        else{
            if(players[i,3] == "Cockpit"){
                switch(currentRoom){
                    case 2:
                        with(currentPlayer)
                            path_start(pth_2_1, 4, path_action_stop, true)
                        break;
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_1, 4, path_action_stop, true)
                        break;
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_1, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 1;
            }
            if(players[i,3] == "Weapons Storage"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_1_2, 4, path_action_stop, true)
                        break;
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_2, 4, path_action_stop, true)
                        break;
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_2, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 2;
            }
            if(players[i,3] == "Medical Bay"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_1_3, 4, path_action_stop, true)
                        break;
                    case 2:
                        with(currentPlayer)
                            path_start(pth_2_3, 4, path_action_stop, true)
                        break;
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_3, 4, path_action_stop, true)
                        break;
                    case 5:
                        with(currentPlayer)
                            path_start(pth_5_3, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 3;
            }
            if(players[i,3] == "Food Supply"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_1_4, 4, path_action_stop, true)
                        break;
                    case 2:
                        with(currentPlayer)
                            path_start(pth_2_4, 4, path_action_stop, true)
                        break;
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_4, 4, path_action_stop, true)
                        break;
                    case 6:
                        with(currentPlayer)
                            path_start(pth_6_4, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 4;
            }
            if(players[i,3] == "Engine Room 1"){
                switch(currentRoom){
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_5, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 5;
            }
            if(players[i,3] == "Engine Room 2"){
                switch(currentRoom){
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_6, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 6;
            }
        }
    }



    //redraw ship cleanliness
    //redraw messy rooms num
    //make new random break room chance
        
    turns_elapsed++;
    audio_play_sound(snd_ding,5,false);
    mess_chance = irandom(10)
    //random room messy
    if(mess_chance == 1){
        random_room = irandom(5)
        obj_shipData.rooms[random_room, 0] = "messy"
    }
    if(turns_elapsed == obj_shipData.turns_remaining){
        alarm[0] = 300
    }

    obj_objective.doProcess = true;
    obj_shipData.doProcess = true;
}

if(point_in_rectangle(mouse_x, mouse_y, 20, 40, 150, 70)) &amp;&amp; (mouse_check_button_pressed(mb_left))
{
    room_goto(rm_mainMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
