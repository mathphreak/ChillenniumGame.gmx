<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
playerTurn = 1;
turns_elapsed = 0;
//Random break chance
break_chance = 0;
random_room = 0;
choice_offered[0] = false;
choice_offered[1] = false;
choice_offered[2] = false;
choice_offered[3] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>players = net_getPlayers();
var choice = "Fix"
//if its player turn
//determine whether current player is Sab
// maybe also check if it's already broken/fixed
if(players[playerTurn, 5]){
    choice = "Break"
}
else
    choice = "Fix"

var rooms = obj_shipData.rooms
    
//player picks a room

// don't offer a choice unless the player is still ready from last time
if playerTurn + 1 == 1 &amp;&amp; !choice_offered[playerTurn] {
    var currentPlayerType = getPlayerWithNumber(playerTurn);
    var currentPlayer = instance_find(currentPlayerType, 0);
    var currentRoom = currentPlayer.currentRoom;
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(currentRoom) + " and it is currently " + obj_shipData.rooms[currentRoom-1,0],
        getRoomNeighbors(currentRoom)
    )
    choice_offered[playerTurn] = true;
}

if playerTurn + 1 == 2 &amp;&amp; !choice_offered[playerTurn]{
    var currentPlayerType = getPlayerWithNumber(playerTurn);
    var currentPlayer = instance_find(currentPlayerType, 0);
    var currentRoom = currentPlayer.currentRoom;
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(currentRoom) + " and it is currently " + obj_shipData.rooms[currentRoom-1,0],
        getRoomNeighbors(currentRoom)
    )
    choice_offered[playerTurn] = true;
}


if playerTurn + 1 == 3 &amp;&amp; !choice_offered[playerTurn]{
    var currentPlayerType = getPlayerWithNumber(playerTurn);
    var currentPlayer = instance_find(currentPlayerType, 0);
    var currentRoom = currentPlayer.currentRoom;
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(currentRoom) + " and it is currently " + obj_shipData.rooms[currentRoom-1,0],
        getRoomNeighbors(currentRoom)
    )
    choice_offered[playerTurn] = true;
}

if playerTurn + 1 == 4 &amp;&amp; !choice_offered[playerTurn]{
    var currentPlayerType = getPlayerWithNumber(playerTurn);
    var currentPlayer = instance_find(currentPlayerType, 0);
    var currentRoom = currentPlayer.currentRoom;
    net_offerChoice(
        players[playerTurn, 0],
        choice,
        'You are in room ' + string(currentRoom) + " and it is currently " + obj_shipData.rooms[currentRoom-1,0],
        getRoomNeighbors(currentRoom)
    )
    choice_offered[playerTurn] = true;
}


    
//room status changes to player
//attempt to take action (if fixed or not fixed)
//if succeed, room changes
//update total broken room state
//end turn, repeat

//Player finished their turn
if(players[playerTurn, 2]){
    playerTurn = (playerTurn + 1) mod 4 
}

//Everybody's gone once
if(net_allPlayersReady()){
    turns_elapsed += 1;
    choice_offered[0] = false;
    choice_offered[1] = false;
    choice_offered[2] = false;
    choice_offered[3] = false;
    for (var i=0; i&lt; array_height_2d(players); i+=1){
        var currentPlayerType = getPlayerWithNumber(i);
        var currentPlayer = instance_find(currentPlayerType, 0);
        var currentRoom = currentPlayer.currentRoom;
        if(players[i, 3] == "Fix"){
            obj_shipData.rooms[currentRoom-1,0] = "fixed"
        }
        else if(players[i,3] == "Break"){
            obj_shipData.rooms[currentRoom-1,0] = "broken"
        }
        else{
            if(players[i,3] == "Room 1"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_2_1, 4, path_action_stop, true)
                        break;
                    case 2:
                        with(currentPlayer)
                            path_start(pth_3_1, 4, path_action_stop, true)
                        break;
                    case 3:
                        with(currentPlayer)
                            path_start(pth_4_1, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 1;
            }
            if(players[i,3] == "Room 2"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_1_2, 4, path_action_stop, true)
                        break;
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_2, 4, path_action_stop, true)
                        break;
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_2, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 2;
            }
            if(players[i,3] == "Room 3"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_1_3, 4, path_action_stop, true)
                        break;
                    case 2:
                        with(currentPlayer)
                            path_start(pth_2_3, 4, path_action_stop, true)
                        break;
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_3, 4, path_action_stop, true)
                        break;
                    case 5:
                        with(currentPlayer)
                            path_start(pth_5_3, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 3;
            }
            if(players[i,3] == "Room 4"){
                switch(currentRoom){
                    case 1:
                        with(currentPlayer)
                            path_start(pth_1_4, 4, path_action_stop, true)
                        break;
                    case 2:
                        with(currentPlayer)
                            path_start(pth_2_4, 4, path_action_stop, true)
                        break;
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_4, 4, path_action_stop, true)
                        break;
                    case 6:
                        with(currentPlayer)
                            path_start(pth_6_4, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 4;
            }
            if(players[i,3] == "Room 5"){
                switch(currentRoom){
                    case 3:
                        with(currentPlayer)
                            path_start(pth_3_5, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 5;
            }
            if(players[i,3] == "Room 6"){
                switch(currentRoom){
                    case 4:
                        with(currentPlayer)
                            path_start(pth_4_6, 4, path_action_stop, true)
                        break;
                    default:
                        break;
                }
                currentPlayer.currentRoom = 6;
            }
        }
    }
}

//redraw ship health
//redraw broken rooms num
//make new random break room chance
    
if(playerTurn == 0)
{
    break_chance = irandom(9)
    //random room broken
    if(break_chance == 1){
        random_room = irandom(5)
        rooms[random_room, 0] = "broken"
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
